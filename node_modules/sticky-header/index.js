! function(name, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition();
  else if (typeof define == 'function') define(definition);
  else this[name] = definition();
}('sticky', function() {

  return function sticky(el, top, options) {

    var requiredOriginalStyles = ['position', 'top', 'left', 'width' ,'backgroundColor','color', 'display', 'flexDirection', 'border', 'z-index'];

    var requiredTop = top || 0;
    var originalRect = calcRect(el);
    var styles = {
      position: 'fixed',
      top: requiredTop + 'px',
      left: originalRect.left + 'px',
      width: originalRect.width + 'px',
      color: "white",
      backgroundColor: "",
      display:"",
      flexDirection:"",
      border:"",
      'z-index': 9999
    }


    if(el.classList.contains('nav')){
      styles.left=5+"%";
      styles.top=10+"%";
      styles.color = "white";
      styles.backgroundColor = "transparent";
      styles.width = 110+"px";
      styles.flexDirection="column";
      styles.display = "flex";
      styles.border = "none";
    }

    if(options && options.enforceWidth) {
      styles.width = originalRect.width + 'px';
    }

    var originalStyles = {}
    requiredOriginalStyles.forEach(function(key) {
      originalStyles[key] = el.style[key];
    });

    var onscroll;
    if (window.onscroll) {
      onscroll = window.onscroll;
    }

    //Controls the window jumping back to the top of the concept block when user clicks on a tab choice
    var navBtns = $(el).find(".nav-item");
    Array.prototype.forEach.call(navBtns, function(navBtn){
      $(navBtn).click(function(){
        window.scrollTo(0,originalRect.top-50);
        setTimeout(function(){
          originalRect = calcRect(el);
        },1000)
      })
    })
    
    //controls window scroll logic to turn on or off sticky
    window.onscroll = throttle(function(event) {
      //turns off sticky if sticky header goes past the bottom of its parent card container
      if(getWindowScroll().top > originalRect.pBottom-75){
        for (key in originalStyles) {
          el.style[key] = originalStyles[key];
        }
        $(el).siblings(".card-body").find(".tab-pane").css("padding-top","5px");
      //turns on sticky if window scroll goes past a sticky header
      }else if (getWindowScroll().top > originalRect.top - requiredTop - 20 && !el.classList.contains("nav")) {
        for (key in styles) {
          el.style[key] = styles[key];
        }
        $(el).siblings(".card-body").find(".tab-pane").css("padding-top","80px");
      //turns on sticky if window scroll goes past a tab navigation
      }else if(getWindowScroll().top > originalRect.top - requiredTop - 80 && el.classList.contains("nav")){
         for (key in styles) {
          el.style[key] = styles[key];
        } 
      //turns off sticky if user scrolls back above content.
      } else {
        for (key in originalStyles) {
          el.style[key] = originalStyles[key];
        }
        $(el).siblings(".card-body").find(".tab-pane").css("padding-top","5px");
      }
      onscroll && onscroll(event)
    },100)
  }

  function throttle(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : Date.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = Date.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  function calcRect(el) {
    var rect = el.getBoundingClientRect();
    var pRect = $(el).parents(".card")[0].getBoundingClientRect();
    var windowScroll = getWindowScroll()
    return {
      left: rect.left + windowScroll.left,
      top: rect.top + windowScroll.top,
      width: rect.width,
      height: rect.height,
      bottom: rect.bottom + windowScroll.top,
      pLeft: pRect.left + windowScroll.left,
      pTop: pRect.top + windowScroll.top,
      pWidth: pRect.width,
      pHeight: pRect.height,
      pBottom: pRect.bottom + windowScroll.top
    }
  }

  function getWindowScroll() {
    return {
      top: window.pageYOffset || document.documentElement.scrollTop,
      left: window.pageXOffset || document.documentElement.scrollLeft
    }
  }

});